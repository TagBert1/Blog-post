library(extrafont)
#library(showtext)
library(lubridate)
# load data
globe_temp <- read_csv("C:/Users/amalasi/Documents/R/Blog post/ggplot2 tutorial 4/GlobalTemperatures.csv")
globe_temp <- globe_temp %>% mutate(Year = year(dt),
Month = month(dt,label = TRUE))
globe_temp %>% ggplot(aes(Month,LandAverageTemperature)) +
geom_point() +
theme(legend.position = "none")
# plotting using default ggplot2 settings
p1 <- globe_temp %>% ggplot(aes(Month,LandAverageTemperature)) +
geom_point() +
theme(legend.position = "none")
# import all the fonts form your computer to R (needs to be only once)
font_import()
fonts()
#loadfonts()
# needs to be done for every R session
loadfonts(device = "win", quiet=TRUE)
# font location in your computer
font_paths()
# fonts available on your computer
font_files()
# adding fonts
font_add_google("Montserrat", "Montserrat")
font_add_google("Roboto", "Roboto")
font_add("Palatino", "pala.ttf")
# checking available font families
font_families()
windows()
# customizing the default theme
theme_customized <- function (base_size = 15, base_family = "Algerian")
#base_line_size = base_size/22,
#base_rect_size = base_size/22)
{
half_line <- base_size/2
t <- theme(line = element_line(colour = "black", size = 0.5,
linetype = 1, lineend = "butt"),
rect = element_rect(fill = "black", colour = "black", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain",
colour = "white", size = base_size, lineheight = 0.9,
hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(),
debug = FALSE),
axis.line = element_blank(),
axis.line.x = NULL,
axis.line.y = NULL,
axis.text = element_text(size = rel(0.8), colour = "grey30"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line/2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1),
axis.text.y.right = element_text(margin = margin(l = 0.8 * half_line/2), hjust = 0),
axis.ticks = element_line(colour = "grey20"),
axis.ticks.length = unit(half_line/2, "pt"),
axis.ticks.length.x = NULL,
axis.ticks.length.x.top = NULL,
axis.ticks.length.x.bottom = NULL,
axis.ticks.length.y = NULL,
axis.ticks.length.y.left = NULL,
axis.ticks.length.y.right = NULL,
axis.title.x = element_text(margin = margin(t = half_line/2), vjust = 1),
axis.title.x.top = element_text(margin = margin(b = half_line/2), vjust = 0),
axis.title.y = element_text(angle = 90, margin = margin(r = half_line/2), vjust = 1),
axis.title.y.right = element_text(angle = -90, margin = margin(l = half_line/2), vjust = 0),
legend.background = element_rect(colour = NA),
legend.spacing = unit(2 * half_line, "pt"),
legend.spacing.x = NULL,
legend.spacing.y = NULL,
legend.margin = margin(half_line, half_line, half_line, half_line),
legend.key = element_rect(fill = "grey95", colour = NA),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
legend.box.margin = margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(2 * half_line, "pt"),
panel.background = element_rect(fill = "grey92", colour = NA),
panel.border = element_blank(),
panel.grid = element_line(colour = "white"),
panel.grid.minor = element_line(size = rel(0.5)),
panel.spacing = unit(half_line, "pt"),
panel.spacing.x = NULL,
panel.spacing.y = NULL,
panel.ontop = FALSE,
strip.background = element_rect(fill = "grey85", colour = NA),
strip.text = element_text(colour = "grey10", size = rel(0.8),
margin = margin(0.8 * half_line, 0.8 * half_line, 0.8 * half_line, 0.8 * half_line)),
strip.text.x = NULL,
strip.text.y = element_text(angle = -90),
strip.text.y.left = element_text(angle = 90),
strip.placement = "inside",
strip.placement.x = NULL,
strip.placement.y = NULL,
strip.switch.pad.grid = unit(half_line/2, "pt"),
strip.switch.pad.wrap = unit(half_line/2, "pt"),
plot.background = element_rect(colour = "white"),
plot.title = element_text(size = rel(1.2), hjust = 0, vjust = 1, margin = margin(b = half_line)),
plot.title.position = "panel",
plot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line)),
plot.caption = element_text(size = rel(0.8), hjust = 1, vjust = 1, margin = margin(t = half_line)),
plot.caption.position = "panel",
plot.tag = element_text(size = rel(1.2), hjust = 0.5, vjust = 0.5),
plot.tag.position = "topleft",
plot.margin = margin(half_line, half_line, half_line, half_line), complete = TRUE)
# ggplot_global$theme_all_null %+replace% t
}
theme_set(theme_customized())
(p2 <- globe_temp %>% ggplot(aes(Month,LandAverageTemperature)) +
geom_point() +
theme(legend.position = "none"))
# customizing the default theme
theme_customized <- function (base_size = 15, base_family = "Algerian")
#base_line_size = base_size/22,
#base_rect_size = base_size/22)
{
half_line <- base_size/2
t <- theme(line = element_line(colour = "black", size = 0.5,
linetype = 1, lineend = "butt"),
rect = element_rect(fill = "#004369", colour = "black", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain",
colour = "white", size = base_size, lineheight = 0.9,
hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(),
debug = FALSE),
axis.line = element_blank(),
axis.line.x = NULL,
axis.line.y = NULL,
axis.text = element_text(size = rel(0.8), colour = "#E5DDC8"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line/2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1),
axis.text.y.right = element_text(margin = margin(l = 0.8 * half_line/2), hjust = 0),
axis.ticks = element_line(colour = "#E5DDC8"),
axis.ticks.length = unit(half_line/2, "pt"),
axis.ticks.length.x = NULL,
axis.ticks.length.x.top = NULL,
axis.ticks.length.x.bottom = NULL,
axis.ticks.length.y = NULL,
axis.ticks.length.y.left = NULL,
axis.ticks.length.y.right = NULL,
axis.title.x = element_text(margin = margin(t = half_line/2), vjust = 1),
axis.title.x.top = element_text(margin = margin(b = half_line/2), vjust = 0),
axis.title.y = element_text(angle = 90, margin = margin(r = half_line/2), vjust = 1),
axis.title.y.right = element_text(angle = -90, margin = margin(l = half_line/2), vjust = 0),
legend.background = element_rect(colour = NA),
legend.spacing = unit(2 * half_line, "pt"),
legend.spacing.x = NULL,
legend.spacing.y = NULL,
legend.margin = margin(half_line, half_line, half_line, half_line),
legend.key = element_rect(fill = "grey95", colour = NA),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
legend.box.margin = margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(2 * half_line, "pt"),
panel.background = element_rect(fill = "#01949A", colour = NA),
panel.border = element_blank(),
panel.grid = element_line(colour = "white"),
panel.grid.minor = element_line(size = rel(0.5)),
panel.spacing = unit(half_line, "pt"),
panel.spacing.x = NULL,
panel.spacing.y = NULL,
panel.ontop = FALSE,
strip.background = element_rect(fill = "grey85", colour = NA),
strip.text = element_text(colour = "grey10", size = rel(0.8),
margin = margin(0.8 * half_line, 0.8 * half_line, 0.8 * half_line, 0.8 * half_line)),
strip.text.x = NULL,
strip.text.y = element_text(angle = -90),
strip.text.y.left = element_text(angle = 90),
strip.placement = "inside",
strip.placement.x = NULL,
strip.placement.y = NULL,
strip.switch.pad.grid = unit(half_line/2, "pt"),
strip.switch.pad.wrap = unit(half_line/2, "pt"),
plot.background = element_rect(colour = "white"),
plot.title = element_text(size = rel(1.2), hjust = 0, vjust = 1, margin = margin(b = half_line)),
plot.title.position = "panel",
plot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line)),
plot.caption = element_text(size = rel(0.8), hjust = 1, vjust = 1, margin = margin(t = half_line)),
plot.caption.position = "panel",
plot.tag = element_text(size = rel(1.2), hjust = 0.5, vjust = 0.5),
plot.tag.position = "topleft",
plot.margin = margin(half_line, half_line, half_line, half_line), complete = TRUE)
# ggplot_global$theme_all_null %+replace% t
}
theme_set(theme_customized())
(p2 <- globe_temp %>% ggplot(aes(Month,LandAverageTemperature)) +
geom_point() +
theme(legend.position = "none"))
(p2 <- globe_temp %>% ggplot(aes(Month,LandAverageTemperature,col="#DB1F48")) +
geom_point() +
theme(legend.position = "none"))
# customizing the default theme
theme_customized <- function (base_size = 15, base_family = "Algerian")
#base_line_size = base_size/22,
#base_rect_size = base_size/22)
{
half_line <- base_size/2
t <- theme(line = element_line(colour = "black", size = 0.5,
linetype = 1, lineend = "butt"),
rect = element_rect(fill = "#004369", colour = "black", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain",
colour = "#E5DDC8", size = base_size, lineheight = 0.9,
hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(),
debug = FALSE),
axis.line = element_blank(),
axis.line.x = NULL,
axis.line.y = NULL,
axis.text = element_text(size = rel(0.8), colour = "#E5DDC8"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line/2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1),
axis.text.y.right = element_text(margin = margin(l = 0.8 * half_line/2), hjust = 0),
axis.ticks = element_line(colour = "#E5DDC8"),
axis.ticks.length = unit(half_line/2, "pt"),
axis.ticks.length.x = NULL,
axis.ticks.length.x.top = NULL,
axis.ticks.length.x.bottom = NULL,
axis.ticks.length.y = NULL,
axis.ticks.length.y.left = NULL,
axis.ticks.length.y.right = NULL,
axis.title.x = element_text(margin = margin(t = half_line/2), vjust = 1),
axis.title.x.top = element_text(margin = margin(b = half_line/2), vjust = 0),
axis.title.y = element_text(angle = 90, margin = margin(r = half_line/2), vjust = 1),
axis.title.y.right = element_text(angle = -90, margin = margin(l = half_line/2), vjust = 0),
legend.background = element_rect(colour = NA),
legend.spacing = unit(2 * half_line, "pt"),
legend.spacing.x = NULL,
legend.spacing.y = NULL,
legend.margin = margin(half_line, half_line, half_line, half_line),
legend.key = element_rect(fill = "grey95", colour = NA),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
legend.box.margin = margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(2 * half_line, "pt"),
panel.background = element_rect(fill = "#01949A", colour = NA),
panel.border = element_blank(),
panel.grid = element_line(colour = "#E5DDC8"),
panel.grid.minor = element_line(size = rel(0.5)),
panel.spacing = unit(half_line, "pt"),
panel.spacing.x = NULL,
panel.spacing.y = NULL,
panel.ontop = FALSE,
strip.background = element_rect(fill = "grey85", colour = NA),
strip.text = element_text(colour = "grey10", size = rel(0.8),
margin = margin(0.8 * half_line, 0.8 * half_line, 0.8 * half_line, 0.8 * half_line)),
strip.text.x = NULL,
strip.text.y = element_text(angle = -90),
strip.text.y.left = element_text(angle = 90),
strip.placement = "inside",
strip.placement.x = NULL,
strip.placement.y = NULL,
strip.switch.pad.grid = unit(half_line/2, "pt"),
strip.switch.pad.wrap = unit(half_line/2, "pt"),
plot.background = element_rect(colour = "white"),
plot.title = element_text(size = rel(1.2), hjust = 0, vjust = 1, margin = margin(b = half_line)),
plot.title.position = "panel",
plot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line)),
plot.caption = element_text(size = rel(0.8), hjust = 1, vjust = 1, margin = margin(t = half_line)),
plot.caption.position = "panel",
plot.tag = element_text(size = rel(1.2), hjust = 0.5, vjust = 0.5),
plot.tag.position = "topleft",
plot.margin = margin(half_line, half_line, half_line, half_line), complete = TRUE)
# ggplot_global$theme_all_null %+replace% t
}
theme_set(theme_customized())
(p2 <- globe_temp %>% ggplot(aes(Month,LandAverageTemperature,col="#DB1F48")) +
geom_point() +
theme(legend.position = "none"))
(p2 <- globe_temp %>% ggplot(aes(Month,LandAverageTemperature,col="red")) +
geom_point() +
theme(legend.position = "none"))
# customizing the default theme
theme_customized <- function (base_size = 15, base_family = "Algerian")
#base_line_size = base_size/22,
#base_rect_size = base_size/22)
{
half_line <- base_size/2
t <- theme(line = element_line(colour = "black", size = 0.5,
linetype = 1, lineend = "butt"),
rect = element_rect(fill = "#004369", colour = "black", size = 0.5, linetype = 1),
text = element_text(family = base_family, face = "plain",
colour = "#E5DDC8", size = base_size, lineheight = 0.9,
hjust = 0.5, vjust = 0.5, angle = 0, margin = margin(),
debug = FALSE),
axis.line = element_blank(),
axis.line.x = NULL,
axis.line.y = NULL,
axis.text = element_text(size = rel(0.8), colour = "#E5DDC8"),
axis.text.x = element_text(margin = margin(t = 0.8 * half_line/2), vjust = 1),
axis.text.x.top = element_text(margin = margin(b = 0.8 * half_line/2), vjust = 0),
axis.text.y = element_text(margin = margin(r = 0.8 * half_line/2), hjust = 1),
axis.text.y.right = element_text(margin = margin(l = 0.8 * half_line/2), hjust = 0),
axis.ticks = element_line(colour = "#E5DDC8"),
axis.ticks.length = unit(half_line/2, "pt"),
axis.ticks.length.x = NULL,
axis.ticks.length.x.top = NULL,
axis.ticks.length.x.bottom = NULL,
axis.ticks.length.y = NULL,
axis.ticks.length.y.left = NULL,
axis.ticks.length.y.right = NULL,
axis.title.x = element_text(margin = margin(t = half_line/2), vjust = 1),
axis.title.x.top = element_text(margin = margin(b = half_line/2), vjust = 0),
axis.title.y = element_text(angle = 90, margin = margin(r = half_line/2), vjust = 1),
axis.title.y.right = element_text(angle = -90, margin = margin(l = half_line/2), vjust = 0),
legend.background = element_rect(colour = NA),
legend.spacing = unit(2 * half_line, "pt"),
legend.spacing.x = NULL,
legend.spacing.y = NULL,
legend.margin = margin(half_line, half_line, half_line, half_line),
legend.key = element_rect(fill = "grey95", colour = NA),
legend.key.size = unit(1.2, "lines"),
legend.key.height = NULL,
legend.key.width = NULL,
legend.text = element_text(size = rel(0.8)),
legend.text.align = NULL,
legend.title = element_text(hjust = 0),
legend.title.align = NULL,
legend.position = "right",
legend.direction = NULL,
legend.justification = "center",
legend.box = NULL,
legend.box.margin = margin(0, 0, 0, 0, "cm"),
legend.box.background = element_blank(),
legend.box.spacing = unit(2 * half_line, "pt"),
panel.background = element_rect(fill = "#01949A", colour = NA),
panel.border = element_blank(),
panel.grid = element_line(colour = "#E5DDC8"),
panel.grid.minor = element_line(size = rel(0.5)),
panel.spacing = unit(half_line, "pt"),
panel.spacing.x = NULL,
panel.spacing.y = NULL,
panel.ontop = FALSE,
strip.background = element_rect(fill = "grey85", colour = NA),
strip.text = element_text(colour = "grey10", size = rel(0.8),
margin = margin(0.8 * half_line, 0.8 * half_line, 0.8 * half_line, 0.8 * half_line)),
strip.text.x = NULL,
strip.text.y = element_text(angle = -90),
strip.text.y.left = element_text(angle = 90),
strip.placement = "inside",
strip.placement.x = NULL,
strip.placement.y = NULL,
strip.switch.pad.grid = unit(half_line/2, "pt"),
strip.switch.pad.wrap = unit(half_line/2, "pt"),
plot.background = element_rect(colour = "#004369"),
plot.title = element_text(size = rel(1.2), hjust = 0, vjust = 1, margin = margin(b = half_line)),
plot.title.position = "panel",
plot.subtitle = element_text(hjust = 0, vjust = 1, margin = margin(b = half_line)),
plot.caption = element_text(size = rel(0.8), hjust = 1, vjust = 1, margin = margin(t = half_line)),
plot.caption.position = "panel",
plot.tag = element_text(size = rel(1.2), hjust = 0.5, vjust = 0.5),
plot.tag.position = "topleft",
plot.margin = margin(half_line, half_line, half_line, half_line), complete = TRUE)
# ggplot_global$theme_all_null %+replace% t
}
theme_set(theme_customized())
(p2 <- globe_temp %>% ggplot(aes(Month,LandAverageTemperature,col="#DB1F48")) +
geom_point() +
theme(legend.position = "none"))
library(plotly)
p1/p2
p1+p2
library(patchwork)
p1/p2
p1
selectInput(inputId="Covid_19_LU", label = "Covid cases:", choices = covid_19, selected=covid_19[1])
LU <- read_csv("Covid_LU.csv")
library(flexdashboard)
library(readxl)
library(ggplot2)
library(tidyverse)
library(flexdashboard)
library(readxl)
library(ggplot2)
library(tidyverse)
library(flexdashboard)
library(readxl)
library(ggplot2)
library(tidyverse)
library(flexdashboard)
library(readxl)
library(ggplot2)
library(tidyverse)
LU <- read_csv("Covid_LU.csv")
#str(LU)
LU$Date <- as.Date(LU$Date, format = "%Y-%m-%d")
mobility <- c("Retail & Recreation","Grocery & Pharmacy","Parks","Transit stations","Workplaces","Residential places")
vaccination <- c("Date","Vac_dose1","Vac_dose2","Total_dose")
covid_19 <- c("a")
selectInput(inputId="Covid_19_LU", label = "Covid cases:", choices = covid_19, selected=covid_19[1])
library(flexdashboard)
library(readxl)
library(ggplot2)
library(tidyverse)
LU <- read_csv("Covid_LU.csv")
#str(LU)
LU$Date <- as.Date(LU$Date, format = "%Y-%m-%d")
mobility <- c("Retail & Recreation","Grocery & Pharmacy","Parks","Transit stations","Workplaces","Residential places")
vaccination <- c("Date","Vac_dose1","Vac_dose2","Total_dose")
covid_19 <- c("a")
# LU <- read_csv("Covid_LU.csv")
# #str(LU)
# LU$Date <- as.Date(LU$Date, format = "%Y-%m-%d")
# mobility <- c("Retail & Recreation","Grocery & Pharmacy","Parks","Transit stations","Workplaces","Residential places")
# vaccination <- c("Date","Vac_dose1","Vac_dose2","Total_dose")
# covid_19 <- c("a")
renderPlot(
LU %>% ggplot(aes(input$vaccination_LU,input$mobility_LU)) + geom_line()
)
selectInput('Covid_19_LU','Covid cases:',covid_19)
selectedData <- reactive({LU[,c(input$vaccination_LU, input$mobility_LU)]})
renderPlot(
LU %>% ggplot(aes(input$vaccination_LU,input$mobility_LU)) + geom_line()
)
View(LU)
setwd("~/R/Blog post/Blog 11-Shiny app")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
mylist <- list(check_box)
library(ggplot2)
library(tidyverse)
library(readxl)
library(plotly)
food <- read_csv("Data.csv", na = "")
# removing unnecessary columns
food <- food[,-c(1,3,4,8:11,20:22)]
glimpse(food)
names(food)[3] <- "year"
supplychain <- c("Pre-Harvest","Harvest","Grading","Storage",
"Transport","Traders","Processing","Packaging",
"Distribution","Wholesale","Retail","Consumer",
"Export")
# typo correction in fsc_location1
food$fsc_location1 <- ifelse(food$fsc_location1 == "Havest","Harvest",food$fsc_location1)
#food_new <- food %>% filter(!(is.na(fsc_location1)))
food_new <- food %>% filter(fsc_location1 %in% supplychain)
# fixing the order of levels
food_new$fsc_location1 <-  food_new %>% factor(fsc_location1,levels=fsc_location1)
country_names <- c(unique(food_new$country),"World")
check_box <- c(unique(food_new$fsc_location1))
mylist <- list(check_box)
View(mylist)
mylist[[1]]
mylist <- list("All"=check_box)
mylsit
mylist
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
